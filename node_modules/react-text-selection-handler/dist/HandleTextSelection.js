"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandleTextSelection = void 0;
var react_1 = __importDefault(require("react"));
var elementContainsDomRect_1 = require("./elementContainsDomRect");
var rangeToTextRects_1 = require("./rangeToTextRects");
var TextSelection_1 = require("./TextSelection");
var notNull = function (value) { return value !== null; };
var normalizedFirefoxRange = function (selection) {
    var finalRange = selection.getRangeAt(selection.rangeCount - 1);
    var firstRange = selection.getRangeAt(0);
    var range = document.createRange();
    range.setStart(firstRange.startContainer, firstRange.startOffset);
    range.setEnd(finalRange.endContainer, finalRange.endOffset);
    return range;
};
var HandleTextSelection = function (_a) {
    var onSelect = _a.onSelect, _b = _a.onDeselect, onDeselect = _b === void 0 ? function () { } : _b, children = _a.children;
    var ref = react_1.default.useRef(null);
    var getSelection = function () {
        var selection = window.getSelection();
        if (!ref.current) {
            return;
        }
        if (!(selection === null || selection === void 0 ? void 0 : selection.toString().trim())) {
            onDeselect();
            return;
        }
        var regionElements = Array.from(ref.current.querySelectorAll('div[data-region-selector-id]'));
        var range = normalizedFirefoxRange(selection);
        var selectionRectangles = rangeToTextRects_1.rangeToTextRects(range)
            .map(function (rectangle) {
            var region = regionElements.find(elementContainsDomRect_1.elementContainsDomRect(rectangle));
            if (!region) {
                return null;
            }
            return TextSelection_1.domRectToSelectionRectangle(rectangle, region);
        })
            .filter(notNull);
        onSelect({ text: selection.toString(), selectionRectangles: selectionRectangles });
    };
    return (react_1.default.createElement("div", { role: "none", ref: ref, onMouseDown: function (e) {
            var _a;
            if (!e.shiftKey) {
                (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
            }
        }, onMouseUp: getSelection }, children));
};
exports.HandleTextSelection = HandleTextSelection;
//# sourceMappingURL=HandleTextSelection.js.map